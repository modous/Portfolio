var D=Object.create;var T=Object.defineProperty;var v=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var U=Object.getPrototypeOf,L=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports);var H=(t,e,r,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let n of S(e))!L.call(t,n)&&n!==r&&T(t,n,{get:()=>e[n],enumerable:!(s=v(e,n))||s.enumerable});return t};var N=(t,e,r)=>(r=t!=null?D(U(t)):{},H(e||!t||!t.__esModule?T(r,"default",{value:t,enumerable:!0}):r,t));var w=y((V,q)=>{"use strict";q.exports=function(e){var r=e.uri,s=e.name,n=e.type;this.uri=r,this.name=s,this.type=n}});var b=y((J,x)=>{"use strict";var I=w();x.exports=function(e){return typeof File<"u"&&e instanceof File||typeof Blob<"u"&&e instanceof Blob||e instanceof I}});var k=y((z,O)=>{"use strict";var P=b();O.exports=function t(e,r,s){r===void 0&&(r=""),s===void 0&&(s=P);var n,i=new Map;function o(c,l){var m=i.get(l);m?m.push.apply(m,c):i.set(l,c)}if(s(e))n=null,o([r],e);else{var d=r?r+".":"";if(typeof FileList<"u"&&e instanceof FileList)n=Array.prototype.map.call(e,function(c,l){return o([""+d+l],c),null});else if(Array.isArray(e))n=e.map(function(c,l){var m=t(c,""+d+l,s);return m.files.forEach(o),m.clone});else if(e&&e.constructor===Object){n={};for(var p in e){var a=t(e[p],""+d+p,s);a.files.forEach(o),n[p]=a.clone}}else n=e}return{clone:n,files:i}}});var h=N(k(),1);var f=class extends Error{query;variables;response;extensions;constructor({query:e,variables:r,response:s,message:n,extensions:i}){super(`GraphQL Request Error: ${n}`),this.query=e,r&&(this.variables=r),i&&(this.extensions=i),Object.defineProperty(this,"response",{enumerable:!1,value:s})}};function u(t,e){if(!t)throw new Error(e)}function E({endpoint:t,query:e,variables:r}){let s=new URLSearchParams;return s.set("query",e),r&&Object.keys(r).length>0&&s.set("variables",JSON.stringify(r)),`${t}?${s.toString()}`}var j=t=>typeof t=="object"&&t!==null&&typeof t.pipe=="function",B=t=>typeof t=="object"&&t!==null&&typeof t.then=="function",R=t=>typeof File<"u"&&t instanceof File||typeof Blob<"u"&&t instanceof Blob||typeof Buffer<"u"&&t instanceof Buffer||j(t)||B(t);var Q=t=>(t.headers.get("Content-Type")??"").includes("application/json");var G=t=>typeof t.get=="function",$=t=>typeof t[Symbol.iterator]=="function";function g(t){if(t===void 0)return{};if(G(t)){let e={};return t.forEach((r,s)=>{e[s]=r}),e}if($(t)){let e={};for(let[r,s]of t)e[r.toLowerCase()]=s;return e}return Object.fromEntries(Object.entries(t).map(([e,r])=>[e.toLowerCase(),r]))}var F=class{endpoint;fetch;fetchOptions;formatQuery;FormData;onError;isFileUpload;constructor(e){u(e.endpoint!==void 0,"endpoint is required"),u(e.fetch!==void 0||typeof fetch<"u","Fetch must be polyfilled or passed in new AwesomeGraphQLClient({ fetch })"),u(!e.formatQuery||typeof e.formatQuery=="function","Invalid config value: `formatQuery` must be a function"),u(!e.onError||typeof e.onError=="function","Invalid config value: `onError` must be a function"),u(!e.isFileUpload||typeof e.isFileUpload=="function","Invalid config value: `isFileUpload` should be a function"),this.endpoint=e.endpoint,this.fetch=e.fetch||fetch.bind(null),this.fetchOptions=e.fetchOptions,this.FormData=e.FormData!==void 0?e.FormData:typeof FormData<"u"?FormData:void 0,this.formatQuery=e.formatQuery,this.onError=e.onError,this.isFileUpload=e.isFileUpload||R}createRequestBody(e,r){let{clone:s,files:n}=(0,h.default)({query:e,variables:r},"",this.isFileUpload),i=JSON.stringify(s);if(n.size===0)return i;u(this.FormData!==void 0,"FormData must be polyfilled or passed in new AwesomeGraphQLClient({ FormData })");let o=new this.FormData;o.append("operations",i);let d={},p=0;for(let a of n.values())d[++p]=a;o.append("map",JSON.stringify(d)),p=0;for(let a of n.keys())o.append(`${++p}`,a);return o}setEndpoint(e){u(e!==void 0,"endpoint is required"),this.endpoint=e}getEndpoint(){return this.endpoint}setFetchOptions(e){this.fetchOptions=e}getFetchOptions(){return this.fetchOptions}async requestSafe(e,r,s){try{let n=this.formatQuery?this.formatQuery(e):e;u(typeof n=="string",`Query should be a string, not ${typeof n}. Otherwise provide formatQuery option`);let i={method:"POST",...this.fetchOptions,...s,headers:{...g(this.fetchOptions?.headers),...g(s?.headers)}},o;if(i.method?.toUpperCase()==="GET"){let a=E({endpoint:this.endpoint,query:n,variables:r});o=await this.fetch(a,i)}else{let a=this.createRequestBody(n,r);o=await this.fetch(this.endpoint,{...i,body:a,headers:typeof a=="string"?{...i.headers,"Content-Type":"application/json"}:i.headers})}if(!o.ok){if(Q(o)){let{errors:a}=await o.json();if(a?.[0]?.message!==void 0)throw new f({query:n,variables:r,response:o,message:a[0].message,extensions:a[0].extensions})}throw new f({query:n,variables:r,response:o,message:`Http Status ${o.status}`})}let{data:d,errors:p}=await o.json();if(p?.[0]!==void 0)throw new f({query:n,variables:r,response:o,message:p[0].message,extensions:p[0].extensions});return{ok:!0,data:d,response:o}}catch(n){let i=n instanceof Error?n:new Error(String(n));if(this.onError)try{this.onError(i)}catch{return{ok:!1,error:i}}return{ok:!1,error:i}}}async request(e,r,s){let n=await this.requestSafe(e,r,s);if(!n.ok)throw n.error;return n.data}};var A=(t,...e)=>{let r="";for(let[s,n]of t.entries())r+=`${n}${s in e?e[s]:""}`;return r.trim()};export{F as AwesomeGraphQLClient,f as GraphQLRequestError,A as gql,R as isFileUpload};
